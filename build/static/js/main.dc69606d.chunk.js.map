{"version":3,"sources":["components/AppNavbar.js","components/RecordModal.js","components/UpdateRecordModal.js","components/RecordList.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","_this","setState","react_default","a","createElement","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","RecordModal","modal","ClientName","ClientPhoneNumber","ClientNotes","onChange","e","console","log","Object","defineProperty","target","name","value","onSubmit","_callee","regenerator_default","wrap","_context","prev","next","preventDefault","fetch","method","body","JSON","stringify","headers","Content-Type","props","refresh","stop","newRecord","Button","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","handleSubmit","Label","for","Input","type","id","placeholder","marginTop","block","UpdateRecordModal","componentWillMount","record","_callee2","_context2","_id","RecordList","records","getRecords","then","response","json","data","catch","error","onDeleteClick","resp","_this2","components_RecordModal","ListGroup","react_transition_group","map","key","timeout","classNames","ListGroupItem","size","components_UpdateRecordModal","App","components_AppNavbar","components_RecordList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc69606d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { \n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Container\n} from  'reactstrap';\n\nclass AppNavbar extends Component {\n  state = {\n    isOpen: false\n  }\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    })\n  }\n\n  render() {\n      return (\n        <div>\n          <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n            <Container>\n              <NavbarBrand href=\"/\">\n                Phone Call Records\n              </NavbarBrand>\n              <NavbarToggler onClick={this.toggle} />\n              <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                  <NavItem>\n                    <NavLink href=\"https://github.com/TylerOlsen14\">\n                      Github\n                    </NavLink>\n                  </NavItem>\n                </Nav>\n              </Collapse>\n            </Container>\n          </Navbar>\n        </div>\n      )\n  }\n}\n\n\nexport default AppNavbar","import React, { Component } from 'react';\nimport {\n  Button, \n  Modal, \n  ModalHeader, \n  ModalBody, \n  Form, \n  FormGroup, \n  Label, \n  Input \n} from 'reactstrap';\n\nclass RecordModal extends Component {\n  state = {\n    modal: false,\n    ClientName: '',\n    ClientPhoneNumber: '',\n    ClientNotes: '',\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    console.log(this.state)\n    this.props.onSubmit(this.state)\n  }\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  onChange = (e) => {\n    console.log(this.state)\n    this.setState({ \n      [e.target.name]: e.target.value,   \n    });\n  }\n\n  onSubmit = async e => {\n    e.preventDefault();\n    await fetch(`https://salty-rogue-kitchen3.herokuapp.com/`, {\n      method: \"POST\",\n      body: JSON.stringify(this.state),\n      headers: {\n          \"Content-Type\": \"application/json\",\n        }\n      }\n    )\n    this.toggle();\n    this.props.refresh();//this refreshes the page after we're done\n  };\n    \n  newRecord = {\n    ClientName: this.state.ClientName,\n    ClientPhoneNumber: this.state.ClientPhoneNumber,\n    ClientNotes: this.state.ClientNotes\n  }\n\n  render() {\n    return(\n      <div>\n        <Button\n          color=\"dark\"\n          style={{marginBottom: '2rem'}}\n          onClick={this.toggle}\n        >\n          Add Record\n        </Button>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n        >\n          <ModalHeader\n            toggle={this.toggle}\n          >\n            Create New Record\n          </ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup onSubmit={this.handleSubmit}>\n                <Label for=\"record\">\n                  Phone Record - Keep our conversations and discussions in order\n                </Label>\n                <Input \n                  type=\"text\"\n                  name=\"ClientName\"\n                  id=\"item\"\n                  placeholder=\"Client Name\"\n                  onChange={this.onChange}\n                />\n                <Input \n                  type=\"number\"\n                  name=\"ClientPhoneNumber\"\n                  id=\"item\"\n                  placeholder=\"Create Phone Number\"\n                  onChange={this.onChange}\n                />\n                <Input \n                  type=\"text\"\n                  name=\"ClientNotes\"\n                  id=\"item\"\n                  placeholder=\"Create coversation record\"\n                  onChange={this.onChange}\n                />\n                <Button\n                  color=\"dark\"\n                  style={{marginTop: '2rem'}}\n                  block\n                >\n                  Create Phone Record\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default ( RecordModal );","import React, { Component } from 'react';\nimport {\n  Button, \n  Modal, \n  ModalHeader, \n  ModalBody, \n  Form, \n  FormGroup, \n  Label, \n  Input \n} from 'reactstrap';\n\nclass UpdateRecordModal extends Component {\n  state = {\n    modal: false,\n    ClientName: '',\n    ClientPhoneNumber: '',\n    ClientNotes: '',\n  }\n\n  // enterModal = async () => {\n  componentWillMount = async () => {\n    this.setState({\n      ClientName: this.props.record.ClientName,\n      ClientPhoneNumber: this.props.record.ClientPhoneNumber,\n      ClientNotes: this.props.record.ClientNotes,\n    })\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    console.log(this.state)\n    this.props.onSubmit(this.state)\n  }\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  onChange = (e) => {\n    console.log(this.state)\n    this.setState({ \n      [e.target.name]: e.target.value,   \n    });\n  }\n\n  onSubmit = async e => {\n    e.preventDefault();\n    await fetch(`https://salty-rogue-kitchen3.herokuapp.com/`+ this.props.record._id, {\n      method: \"PUT\",\n      body: JSON.stringify(this.state),\n      headers: {\n          \"Content-Type\": \"application/json\",\n        }\n      }\n    )\n    this.toggle();\n    this.props.refresh();//this refreshes the page after we're done\n  };\n    \n  newRecord = {\n    ClientName: this.state.ClientName,\n    ClientPhoneNumber: this.state.ClientPhoneNumber,\n    ClientNotes: this.state.ClientNotes\n  }\n\n  // componentDidMount() {\n  //   console.log(this.props.id)\n  // }\n\n  render() {\n    return(\n      <div>\n        <Button\n          color=\"dark\"\n          style={{marginBottom: '2rem'}}\n          onClick={this.toggle}\n        >\n          Update Record\n        </Button>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n        >\n          <ModalHeader\n            toggle={this.toggle}\n          >\n            Update Record\n          </ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup onSubmit={this.handleSubmit}>\n                <Label for=\"record\">\n                  Phone Record - Keep our conversations and discussions in order\n                </Label>\n                <Input \n                  type=\"text\"\n                  name=\"ClientName\"\n                  id=\"item\"\n                  // placeholder={Client Name}\n                  onChange={this.onChange}\n                  value={this.state.ClientName}\n                />\n                <Input \n                  type=\"number\"\n                  name=\"ClientPhoneNumber\"\n                  id=\"item\"\n                  // placeholder=\"Create Phone Number\"\n                  onChange={this.onChange}\n                  value={this.state.ClientPhoneNumber}\n                />\n                <Input \n                  type=\"text\"\n                  name=\"ClientNotes\"\n                  id=\"item\"\n                  // placeholder=\"Create coversation record\"\n                  onChange={this.onChange}\n                  value={this.state.ClientNotes}\n                />\n                <Button\n                  color=\"dark\"\n                  style={{marginTop: '2rem'}}\n                  block\n                >\n                  Update Phone Record\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default ( UpdateRecordModal );","import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport RecordModal from './RecordModal'\nimport UpdateRecordModal from \"./UpdateRecordModal\";\n\nclass RecordList extends Component{\n  state = {\n    records: [],\n  }\n\n  getRecords = async () => {\n    await fetch('https://salty-rogue-kitchen3.herokuapp.com/')\n      .then(response => {\n        return response.json();\n      })\n      .then(data => \n        this.setState({ records: data }))\n      .catch(error => console.log('Error:', error))\n      }\n  \n  onDeleteClick = async (_id) => {\n    await fetch('https://salty-rogue-kitchen3.herokuapp.com/' + _id, {\n      method: \"DELETE\"\n    })\n    .then(resp => {\n      this.getRecords();\n    });\n  }\n  \n  // onEditClick = async (_id) => {\n  //   <UpdateRecordModal />\n  // }\n\n  componentWillMount() {\n    this.getRecords()\n  }\n\n  render() {\n    console.log(this);\n    console.log(this.state);\n    return(\n      <Container>\n        <RecordModal refresh={this.getRecords}/> \n        {/* //takes function, assigns it a prop, to a child component. Child component can call the function because I'm passing it in. */}\n        <ListGroup>\n          <TransitionGroup className=\"Records-List\">\n            {this.state.records.map((record, _id) => (\n              <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                        <h5>Client Name: {record.ClientName}</h5>\n                        <h5>Client Phone Number: {record.ClientPhoneNumber}</h5>\n                        <h5>Notes: {record.ClientNotes}</h5>\n                  <Button\n                    className=\"remove-btn\"\n                    color=\"danger\"\n                    size=\"sm\"\n                    onClick={() => this.onDeleteClick(record._id)}\n                    >\n                    &times;\n                  </Button>\n\n            <UpdateRecordModal record={record} refresh={this.getRecords} />\n\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n        </ListGroup>\n      </Container>\n    )\n  }\n}\n\n\nexport default RecordList","import React from 'react';\nimport './App.css';\nimport NavBar from './components/AppNavbar'\nimport RecordList from './components/RecordList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <RecordList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}